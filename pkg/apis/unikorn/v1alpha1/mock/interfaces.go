// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1alpha1 "github.com/unikorn-cloud/core/pkg/apis/unikorn/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
)

// MockResourceLabeller is a mock of ResourceLabeller interface.
type MockResourceLabeller struct {
	ctrl     *gomock.Controller
	recorder *MockResourceLabellerMockRecorder
}

// MockResourceLabellerMockRecorder is the mock recorder for MockResourceLabeller.
type MockResourceLabellerMockRecorder struct {
	mock *MockResourceLabeller
}

// NewMockResourceLabeller creates a new mock instance.
func NewMockResourceLabeller(ctrl *gomock.Controller) *MockResourceLabeller {
	mock := &MockResourceLabeller{ctrl: ctrl}
	mock.recorder = &MockResourceLabellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceLabeller) EXPECT() *MockResourceLabellerMockRecorder {
	return m.recorder
}

// ResourceLabels mocks base method.
func (m *MockResourceLabeller) ResourceLabels() (labels.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceLabels")
	ret0, _ := ret[0].(labels.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceLabels indicates an expected call of ResourceLabels.
func (mr *MockResourceLabellerMockRecorder) ResourceLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceLabels", reflect.TypeOf((*MockResourceLabeller)(nil).ResourceLabels))
}

// MockReconcilePauser is a mock of ReconcilePauser interface.
type MockReconcilePauser struct {
	ctrl     *gomock.Controller
	recorder *MockReconcilePauserMockRecorder
}

// MockReconcilePauserMockRecorder is the mock recorder for MockReconcilePauser.
type MockReconcilePauserMockRecorder struct {
	mock *MockReconcilePauser
}

// NewMockReconcilePauser creates a new mock instance.
func NewMockReconcilePauser(ctrl *gomock.Controller) *MockReconcilePauser {
	mock := &MockReconcilePauser{ctrl: ctrl}
	mock.recorder = &MockReconcilePauserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconcilePauser) EXPECT() *MockReconcilePauserMockRecorder {
	return m.recorder
}

// Paused mocks base method.
func (m *MockReconcilePauser) Paused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Paused indicates an expected call of Paused.
func (mr *MockReconcilePauserMockRecorder) Paused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paused", reflect.TypeOf((*MockReconcilePauser)(nil).Paused))
}

// MockStatusConditionReader is a mock of StatusConditionReader interface.
type MockStatusConditionReader struct {
	ctrl     *gomock.Controller
	recorder *MockStatusConditionReaderMockRecorder
}

// MockStatusConditionReaderMockRecorder is the mock recorder for MockStatusConditionReader.
type MockStatusConditionReaderMockRecorder struct {
	mock *MockStatusConditionReader
}

// NewMockStatusConditionReader creates a new mock instance.
func NewMockStatusConditionReader(ctrl *gomock.Controller) *MockStatusConditionReader {
	mock := &MockStatusConditionReader{ctrl: ctrl}
	mock.recorder = &MockStatusConditionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusConditionReader) EXPECT() *MockStatusConditionReaderMockRecorder {
	return m.recorder
}

// StatusConditionRead mocks base method.
func (m *MockStatusConditionReader) StatusConditionRead(t v1alpha1.ConditionType) (*v1alpha1.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusConditionRead", t)
	ret0, _ := ret[0].(*v1alpha1.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusConditionRead indicates an expected call of StatusConditionRead.
func (mr *MockStatusConditionReaderMockRecorder) StatusConditionRead(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusConditionRead", reflect.TypeOf((*MockStatusConditionReader)(nil).StatusConditionRead), t)
}

// MockStatusConditionWriter is a mock of StatusConditionWriter interface.
type MockStatusConditionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockStatusConditionWriterMockRecorder
}

// MockStatusConditionWriterMockRecorder is the mock recorder for MockStatusConditionWriter.
type MockStatusConditionWriterMockRecorder struct {
	mock *MockStatusConditionWriter
}

// NewMockStatusConditionWriter creates a new mock instance.
func NewMockStatusConditionWriter(ctrl *gomock.Controller) *MockStatusConditionWriter {
	mock := &MockStatusConditionWriter{ctrl: ctrl}
	mock.recorder = &MockStatusConditionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusConditionWriter) EXPECT() *MockStatusConditionWriterMockRecorder {
	return m.recorder
}

// StatusConditionWrite mocks base method.
func (m *MockStatusConditionWriter) StatusConditionWrite(t v1alpha1.ConditionType, status v1.ConditionStatus, reason v1alpha1.ConditionReason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusConditionWrite", t, status, reason, message)
}

// StatusConditionWrite indicates an expected call of StatusConditionWrite.
func (mr *MockStatusConditionWriterMockRecorder) StatusConditionWrite(t, status, reason, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusConditionWrite", reflect.TypeOf((*MockStatusConditionWriter)(nil).StatusConditionWrite), t, status, reason, message)
}

// MockManagableResourceInterface is a mock of ManagableResourceInterface interface.
type MockManagableResourceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagableResourceInterfaceMockRecorder
}

// MockManagableResourceInterfaceMockRecorder is the mock recorder for MockManagableResourceInterface.
type MockManagableResourceInterfaceMockRecorder struct {
	mock *MockManagableResourceInterface
}

// NewMockManagableResourceInterface creates a new mock instance.
func NewMockManagableResourceInterface(ctrl *gomock.Controller) *MockManagableResourceInterface {
	mock := &MockManagableResourceInterface{ctrl: ctrl}
	mock.recorder = &MockManagableResourceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagableResourceInterface) EXPECT() *MockManagableResourceInterfaceMockRecorder {
	return m.recorder
}

// DeepCopyObject mocks base method.
func (m *MockManagableResourceInterface) DeepCopyObject() runtime.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeepCopyObject")
	ret0, _ := ret[0].(runtime.Object)
	return ret0
}

// DeepCopyObject indicates an expected call of DeepCopyObject.
func (mr *MockManagableResourceInterfaceMockRecorder) DeepCopyObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeepCopyObject", reflect.TypeOf((*MockManagableResourceInterface)(nil).DeepCopyObject))
}

// GetAnnotations mocks base method.
func (m *MockManagableResourceInterface) GetAnnotations() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotations")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAnnotations indicates an expected call of GetAnnotations.
func (mr *MockManagableResourceInterfaceMockRecorder) GetAnnotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotations", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetAnnotations))
}

// GetCreationTimestamp mocks base method.
func (m *MockManagableResourceInterface) GetCreationTimestamp() v10.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreationTimestamp")
	ret0, _ := ret[0].(v10.Time)
	return ret0
}

// GetCreationTimestamp indicates an expected call of GetCreationTimestamp.
func (mr *MockManagableResourceInterfaceMockRecorder) GetCreationTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreationTimestamp", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetCreationTimestamp))
}

// GetDeletionGracePeriodSeconds mocks base method.
func (m *MockManagableResourceInterface) GetDeletionGracePeriodSeconds() *int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionGracePeriodSeconds")
	ret0, _ := ret[0].(*int64)
	return ret0
}

// GetDeletionGracePeriodSeconds indicates an expected call of GetDeletionGracePeriodSeconds.
func (mr *MockManagableResourceInterfaceMockRecorder) GetDeletionGracePeriodSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionGracePeriodSeconds", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetDeletionGracePeriodSeconds))
}

// GetDeletionTimestamp mocks base method.
func (m *MockManagableResourceInterface) GetDeletionTimestamp() *v10.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletionTimestamp")
	ret0, _ := ret[0].(*v10.Time)
	return ret0
}

// GetDeletionTimestamp indicates an expected call of GetDeletionTimestamp.
func (mr *MockManagableResourceInterfaceMockRecorder) GetDeletionTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletionTimestamp", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetDeletionTimestamp))
}

// GetFinalizers mocks base method.
func (m *MockManagableResourceInterface) GetFinalizers() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizers")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFinalizers indicates an expected call of GetFinalizers.
func (mr *MockManagableResourceInterfaceMockRecorder) GetFinalizers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizers", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetFinalizers))
}

// GetGenerateName mocks base method.
func (m *MockManagableResourceInterface) GetGenerateName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenerateName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGenerateName indicates an expected call of GetGenerateName.
func (mr *MockManagableResourceInterfaceMockRecorder) GetGenerateName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenerateName", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetGenerateName))
}

// GetGeneration mocks base method.
func (m *MockManagableResourceInterface) GetGeneration() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneration")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetGeneration indicates an expected call of GetGeneration.
func (mr *MockManagableResourceInterfaceMockRecorder) GetGeneration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneration", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetGeneration))
}

// GetLabels mocks base method.
func (m *MockManagableResourceInterface) GetLabels() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockManagableResourceInterfaceMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetLabels))
}

// GetManagedFields mocks base method.
func (m *MockManagableResourceInterface) GetManagedFields() []v10.ManagedFieldsEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedFields")
	ret0, _ := ret[0].([]v10.ManagedFieldsEntry)
	return ret0
}

// GetManagedFields indicates an expected call of GetManagedFields.
func (mr *MockManagableResourceInterfaceMockRecorder) GetManagedFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedFields", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetManagedFields))
}

// GetName mocks base method.
func (m *MockManagableResourceInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockManagableResourceInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetName))
}

// GetNamespace mocks base method.
func (m *MockManagableResourceInterface) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockManagableResourceInterfaceMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetNamespace))
}

// GetObjectKind mocks base method.
func (m *MockManagableResourceInterface) GetObjectKind() schema.ObjectKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectKind")
	ret0, _ := ret[0].(schema.ObjectKind)
	return ret0
}

// GetObjectKind indicates an expected call of GetObjectKind.
func (mr *MockManagableResourceInterfaceMockRecorder) GetObjectKind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectKind", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetObjectKind))
}

// GetOwnerReferences mocks base method.
func (m *MockManagableResourceInterface) GetOwnerReferences() []v10.OwnerReference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerReferences")
	ret0, _ := ret[0].([]v10.OwnerReference)
	return ret0
}

// GetOwnerReferences indicates an expected call of GetOwnerReferences.
func (mr *MockManagableResourceInterfaceMockRecorder) GetOwnerReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerReferences", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetOwnerReferences))
}

// GetResourceVersion mocks base method.
func (m *MockManagableResourceInterface) GetResourceVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceVersion indicates an expected call of GetResourceVersion.
func (mr *MockManagableResourceInterfaceMockRecorder) GetResourceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceVersion", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetResourceVersion))
}

// GetSelfLink mocks base method.
func (m *MockManagableResourceInterface) GetSelfLink() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelfLink")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSelfLink indicates an expected call of GetSelfLink.
func (mr *MockManagableResourceInterfaceMockRecorder) GetSelfLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelfLink", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetSelfLink))
}

// GetUID mocks base method.
func (m *MockManagableResourceInterface) GetUID() types.UID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID")
	ret0, _ := ret[0].(types.UID)
	return ret0
}

// GetUID indicates an expected call of GetUID.
func (mr *MockManagableResourceInterfaceMockRecorder) GetUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockManagableResourceInterface)(nil).GetUID))
}

// Paused mocks base method.
func (m *MockManagableResourceInterface) Paused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Paused indicates an expected call of Paused.
func (mr *MockManagableResourceInterfaceMockRecorder) Paused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paused", reflect.TypeOf((*MockManagableResourceInterface)(nil).Paused))
}

// ResourceLabels mocks base method.
func (m *MockManagableResourceInterface) ResourceLabels() (labels.Set, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceLabels")
	ret0, _ := ret[0].(labels.Set)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceLabels indicates an expected call of ResourceLabels.
func (mr *MockManagableResourceInterfaceMockRecorder) ResourceLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceLabels", reflect.TypeOf((*MockManagableResourceInterface)(nil).ResourceLabels))
}

// SetAnnotations mocks base method.
func (m *MockManagableResourceInterface) SetAnnotations(annotations map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAnnotations", annotations)
}

// SetAnnotations indicates an expected call of SetAnnotations.
func (mr *MockManagableResourceInterfaceMockRecorder) SetAnnotations(annotations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAnnotations", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetAnnotations), annotations)
}

// SetCreationTimestamp mocks base method.
func (m *MockManagableResourceInterface) SetCreationTimestamp(timestamp v10.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreationTimestamp", timestamp)
}

// SetCreationTimestamp indicates an expected call of SetCreationTimestamp.
func (mr *MockManagableResourceInterfaceMockRecorder) SetCreationTimestamp(timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreationTimestamp", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetCreationTimestamp), timestamp)
}

// SetDeletionGracePeriodSeconds mocks base method.
func (m *MockManagableResourceInterface) SetDeletionGracePeriodSeconds(arg0 *int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeletionGracePeriodSeconds", arg0)
}

// SetDeletionGracePeriodSeconds indicates an expected call of SetDeletionGracePeriodSeconds.
func (mr *MockManagableResourceInterfaceMockRecorder) SetDeletionGracePeriodSeconds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionGracePeriodSeconds", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetDeletionGracePeriodSeconds), arg0)
}

// SetDeletionTimestamp mocks base method.
func (m *MockManagableResourceInterface) SetDeletionTimestamp(timestamp *v10.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeletionTimestamp", timestamp)
}

// SetDeletionTimestamp indicates an expected call of SetDeletionTimestamp.
func (mr *MockManagableResourceInterfaceMockRecorder) SetDeletionTimestamp(timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeletionTimestamp", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetDeletionTimestamp), timestamp)
}

// SetFinalizers mocks base method.
func (m *MockManagableResourceInterface) SetFinalizers(finalizers []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizers", finalizers)
}

// SetFinalizers indicates an expected call of SetFinalizers.
func (mr *MockManagableResourceInterfaceMockRecorder) SetFinalizers(finalizers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizers", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetFinalizers), finalizers)
}

// SetGenerateName mocks base method.
func (m *MockManagableResourceInterface) SetGenerateName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGenerateName", name)
}

// SetGenerateName indicates an expected call of SetGenerateName.
func (mr *MockManagableResourceInterfaceMockRecorder) SetGenerateName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGenerateName", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetGenerateName), name)
}

// SetGeneration mocks base method.
func (m *MockManagableResourceInterface) SetGeneration(generation int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGeneration", generation)
}

// SetGeneration indicates an expected call of SetGeneration.
func (mr *MockManagableResourceInterfaceMockRecorder) SetGeneration(generation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGeneration", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetGeneration), generation)
}

// SetLabels mocks base method.
func (m *MockManagableResourceInterface) SetLabels(labels map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLabels", labels)
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockManagableResourceInterfaceMockRecorder) SetLabels(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetLabels), labels)
}

// SetManagedFields mocks base method.
func (m *MockManagableResourceInterface) SetManagedFields(managedFields []v10.ManagedFieldsEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetManagedFields", managedFields)
}

// SetManagedFields indicates an expected call of SetManagedFields.
func (mr *MockManagableResourceInterfaceMockRecorder) SetManagedFields(managedFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManagedFields", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetManagedFields), managedFields)
}

// SetName mocks base method.
func (m *MockManagableResourceInterface) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockManagableResourceInterfaceMockRecorder) SetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetName), name)
}

// SetNamespace mocks base method.
func (m *MockManagableResourceInterface) SetNamespace(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNamespace", namespace)
}

// SetNamespace indicates an expected call of SetNamespace.
func (mr *MockManagableResourceInterfaceMockRecorder) SetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespace", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetNamespace), namespace)
}

// SetOwnerReferences mocks base method.
func (m *MockManagableResourceInterface) SetOwnerReferences(arg0 []v10.OwnerReference) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOwnerReferences", arg0)
}

// SetOwnerReferences indicates an expected call of SetOwnerReferences.
func (mr *MockManagableResourceInterfaceMockRecorder) SetOwnerReferences(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnerReferences", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetOwnerReferences), arg0)
}

// SetResourceVersion mocks base method.
func (m *MockManagableResourceInterface) SetResourceVersion(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResourceVersion", version)
}

// SetResourceVersion indicates an expected call of SetResourceVersion.
func (mr *MockManagableResourceInterfaceMockRecorder) SetResourceVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourceVersion", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetResourceVersion), version)
}

// SetSelfLink mocks base method.
func (m *MockManagableResourceInterface) SetSelfLink(selfLink string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSelfLink", selfLink)
}

// SetSelfLink indicates an expected call of SetSelfLink.
func (mr *MockManagableResourceInterfaceMockRecorder) SetSelfLink(selfLink any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelfLink", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetSelfLink), selfLink)
}

// SetUID mocks base method.
func (m *MockManagableResourceInterface) SetUID(uid types.UID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUID", uid)
}

// SetUID indicates an expected call of SetUID.
func (mr *MockManagableResourceInterfaceMockRecorder) SetUID(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUID", reflect.TypeOf((*MockManagableResourceInterface)(nil).SetUID), uid)
}

// StatusConditionRead mocks base method.
func (m *MockManagableResourceInterface) StatusConditionRead(t v1alpha1.ConditionType) (*v1alpha1.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusConditionRead", t)
	ret0, _ := ret[0].(*v1alpha1.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusConditionRead indicates an expected call of StatusConditionRead.
func (mr *MockManagableResourceInterfaceMockRecorder) StatusConditionRead(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusConditionRead", reflect.TypeOf((*MockManagableResourceInterface)(nil).StatusConditionRead), t)
}

// StatusConditionWrite mocks base method.
func (m *MockManagableResourceInterface) StatusConditionWrite(t v1alpha1.ConditionType, status v1.ConditionStatus, reason v1alpha1.ConditionReason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusConditionWrite", t, status, reason, message)
}

// StatusConditionWrite indicates an expected call of StatusConditionWrite.
func (mr *MockManagableResourceInterfaceMockRecorder) StatusConditionWrite(t, status, reason, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusConditionWrite", reflect.TypeOf((*MockManagableResourceInterface)(nil).StatusConditionWrite), t, status, reason, message)
}
